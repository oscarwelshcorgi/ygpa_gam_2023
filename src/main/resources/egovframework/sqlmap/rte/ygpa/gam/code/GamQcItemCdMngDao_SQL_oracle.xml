<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="ygpa.gam.code">

	<typeAlias alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias alias="hashMap" type="java.util.HashMap"/>
	<typeAlias alias="gamQcItemCdMngVo" type="egovframework.rte.ygpa.gam.code.service.GamQcItemCdMngVo"/>

	<resultMap id="gamQcItemCdMngSumMap" class="egovframework.rte.ygpa.gam.code.service.GamQcItemCdMngVo">
		<result property="dataCount" column="DATA_COUNT" columnIndex="1"/>
	</resultMap>

	<select id="gamQcItemCdMngDao.selectQcItemCdMngList_D" parameterClass="gamQcItemCdMngVo" resultClass="egovMap">
		SELECT A.*
			FROM (
				SELECT ROWNUM RNUM, S.*
					FROM (
						SELECT
								 T1.QC_ITEM_CD
								,T1.QC_ITEM_NM
								,T1.FCLTS_JOB_SE
								,T1.QC_ITEM_DTLS
								,GAM_GET_FCLTS_JOB_SE_NM(T1.FCLTS_JOB_SE) AS FCLTS_JOB_SE_NM
								,T1.QC_ITEM_UPPER_CD
								,(CASE WHEN T1.QC_ITEM_UPPER_CD = '000000000' THEN '점검 항목 메인' ELSE T2.QC_ITEM_NM END) AS QC_ITEM_UPPER_NM
								,TO_CHAR(T1.DEPTH_SORT) AS DEPTH_SORT
								,T1.USE_YN
								,T1.REG_USR
								,TO_CHAR(T1.REGIST_DT,'YYYY-MM-DD HH24:MI:SS') AS REGIST_DT
								,T1.UPD_USR
								,TO_CHAR(T1.UPDT_DT,'YYYY-MM-DD HH24:MI:SS') AS UPDT_DT
								,T1.LEAF_YN AS LEAF_YN
							FROM QC_ITEM_CD_F T1
							LEFT OUTER JOIN QC_ITEM_CD_F T2 ON (T1.QC_ITEM_UPPER_CD=T2.QC_ITEM_CD)
						WHERE 1 = 1

						<isNotEmpty property="sQcItemCd">
						AND T1.QC_ITEM_CD LIKE #sQcItemCd# || '%'
						</isNotEmpty>

						<isNotEmpty property="sQcItemNm">
						AND T1.QC_ITEM_NM LIKE '%' || #sQcItemNm# || '%'
						</isNotEmpty>

						<isNotEmpty property="sFcltsJobSe">
						AND T1.FCLTS_JOB_SE = #sFcltsJobSe#
						</isNotEmpty>

						<isNotEmpty property="sDepthSort">
						AND T1.DEPTH_SORT = TO_NUMBER(#sDepthSort#)
						</isNotEmpty>

						<isNotEmpty property="sLeafYn">
						AND T1.LEAF_YN = #sLeafYn#
						</isNotEmpty>

						ORDER BY T1.QC_ITEM_CD
				) S
		) A
		<![CDATA[
		WHERE ROWNUM <= #recordCountPerPage# and RNUM > #firstIndex#
		]]>
	</select>

	<select id="gamQcItemCdMngDao.selectQcItemCdMngListTotCnt_S" parameterClass="gamQcItemCdMngVo" resultMap="gamQcItemCdMngSumMap">
		SELECT
				 LTRIM(TO_CHAR(COUNT(*),'999,999,999,990')) AS DATA_COUNT
			FROM QC_ITEM_CD_F
		WHERE 1=1

		<isNotEmpty property="sQcItemCd">
		AND QC_ITEM_CD LIKE #sQcItemCd# || '%'
		</isNotEmpty>

		<isNotEmpty property="sQcItemNm">
		AND QC_ITEM_NM LIKE '%' || #sQcItemNm# || '%'
		</isNotEmpty>

		<isNotEmpty property="sFcltsJobSe">
		AND FCLTS_JOB_SE = #sFcltsJobSe#
		</isNotEmpty>

		<isNotEmpty property="sDepthSort">
		AND DEPTH_SORT = TO_NUMBER(#sDepthSort#)
		</isNotEmpty>

		<isNotEmpty property="sLeafYn">
		AND T1.LEAF_YN = #sLeafYn#
		</isNotEmpty>

	</select>

	<select id="gamQcItemCdMngDao.selectQcItemCdMngPk_S" parameterClass="gamQcItemCdMngVo" resultClass="egovMap">
		SELECT
				 T1.QC_ITEM_CD
				,T1.QC_ITEM_NM
				,T1.FCLTS_JOB_SE
				,T1.QC_ITEM_DTLS
				,GAM_GET_FCLTS_JOB_SE_NM(T1.FCLTS_JOB_SE) AS FCLTS_JOB_SE_NM
				,T1.QC_ITEM_UPPER_CD
				,(CASE WHEN T1.QC_ITEM_UPPER_CD = '000000000' THEN '점검 항목 메인' ELSE T2.QC_ITEM_NM END) AS QC_ITEM_UPPER_NM
				,TO_CHAR(T1.DEPTH_SORT) AS DEPTH_SORT
				,T1.USE_YN
				,T1.REG_USR
				,TO_CHAR(T1.REGIST_DT,'YYYY-MM-DD HH24:MI:SS') AS REGIST_DT
				,T1.UPD_USR
				,TO_CHAR(T1.UPDT_DT,'YYYY-MM-DD HH24:MI:SS') AS UPDT_DT
				,T1.LEAF_YN AS LEAF_YN
			FROM QC_ITEM_CD_F T1
			LEFT OUTER JOIN QC_ITEM_CD_F T2 ON (T1.QC_ITEM_UPPER_CD=T2.QC_ITEM_CD)
		WHERE T1.QC_ITEM_CD = #qcItemCd#
	</select>

	<select id="gamQcItemCdMngDao.selectQcItemCdMngNewQcItemCd_S" parameterClass="gamQcItemCdMngVo" resultClass="java.lang.String">
		SELECT
				<isEqual property="depthSort" compareValue="1">
				 (CASE WHEN COUNT(*) = 0 THEN NVL(MAX(#fcltsJobSe# || '00000000'),#fcltsJobSe# || '00000000') ELSE '!00000000' END) AS NEW_QC_ITEM_CD
				</isEqual>

				<isEqual property="depthSort" compareValue="2">
				 #fcltsJobSe# || LTRIM(TO_CHAR(NVL(TO_NUMBER(MAX(SUBSTRB(QC_ITEM_CD,2,2))),0)+1,'00')) || '000000' AS NEW_QC_ITEM_CD
				</isEqual>

				<isEqual property="depthSort" compareValue="3">
				 #fcltsJobSe# || SUBSTRB(#qcItemUpperCd#,2,2) || LTRIM(TO_CHAR(NVL(TO_NUMBER(MAX(SUBSTRB(QC_ITEM_CD,4,2))),0)+1,'00')) || '0000' AS NEW_QC_ITEM_CD
				</isEqual>

				<isEqual property="depthSort" compareValue="4">
				 #fcltsJobSe# || SUBSTRB(#qcItemUpperCd#,2,4) || LTRIM(TO_CHAR(NVL(TO_NUMBER(MAX(SUBSTRB(QC_ITEM_CD,6,2))),0)+1,'00')) || '00' AS NEW_QC_ITEM_CD
				</isEqual>

				<isEqual property="depthSort" compareValue="5">
				 #fcltsJobSe# || SUBSTRB(#qcItemUpperCd#,2,6) || LTRIM(TO_CHAR(NVL(TO_NUMBER(MAX(SUBSTRB(QC_ITEM_CD,8,2))),0)+1,'00')) AS NEW_QC_ITEM_CD
				</isEqual>

			FROM QC_ITEM_CD_F
		WHERE FCLTS_JOB_SE = #fcltsJobSe#
		AND DEPTH_SORT = TO_NUMBER(#depthSort#)

		<isEqual property="depthSort" compareValue="3">
		AND QC_ITEM_CD LIKE SUBSTRB(#qcItemUpperCd#,1,3) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="4">
		AND QC_ITEM_CD LIKE SUBSTRB(#qcItemUpperCd#,1,5) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="5">
		AND QC_ITEM_CD LIKE SUBSTRB(#qcItemUpperCd#,1,7) || '%'
		</isEqual>
	</select>

	<select id="gamQcItemCdMngDao.selectQcItemCdMngTreeList_D" parameterClass="gamQcItemCdMngVo" resultClass="egovMap">
		<![CDATA[
		SELECT
				 TO_NUMBER('1' || SUBSTRB(QC_ITEM_CD,2,8)) AS QC_ITEM_CD
				,DEPTH_SORT
				,QC_ITEM_NM
				,(CASE WHEN DEPTH_SORT > 1 THEN TO_NUMBER('1' || SUBSTRB(QC_ITEM_UPPER_CD,2,8)) ELSE 0 END) AS QC_ITEM_UPPER_CD
			FROM QC_ITEM_CD_F
		WHERE FCLTS_JOB_SE = #fcltsJobSe#
		ORDER BY QC_ITEM_CD,DEPTH_SORT
		]]>
	</select>

	<select id="gamQcItemCdMngDao.selectQcItemCdMngLowerDataCnt_S" parameterClass="gamQcItemCdMngVo" resultClass="egovMap">
		<![CDATA[
		SELECT
				 COUNT(*) AS LOWER_DATA_CNT
			FROM QC_ITEM_CD_F
		WHERE DEPTH_SORT > NVL(TO_NUMBER(#depthSort#),10)
		]]>
		<isEqual property="depthSort" compareValue="1">
		AND QC_ITEM_UPPER_CD LIKE SUBSTRB(#qcItemCd#,1,1) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="2">
		AND QC_ITEM_UPPER_CD LIKE SUBSTRB(#qcItemCd#,1,3) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="3">
		AND QC_ITEM_UPPER_CD LIKE SUBSTRB(#qcItemCd#,1,5) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="4">
		AND QC_ITEM_UPPER_CD LIKE SUBSTRB(#qcItemCd#,1,7) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="5">
		AND QC_ITEM_UPPER_CD = #qcItemCd#
		</isEqual>
	</select>

	<insert id="gamQcItemCdMngDao.insertQcItemCdMng_S">
		INSERT INTO QC_ITEM_CD_F
		(
			 QC_ITEM_CD
			,QC_ITEM_NM
			,FCLTS_JOB_SE
			,QC_ITEM_DTLS
			,QC_ITEM_UPPER_CD
			,DEPTH_SORT
			,USE_YN
			,REG_USR
			,REGIST_DT
			,LEAF_YN
		)
		VALUES
		(
			 #qcItemCd#
			,#qcItemNm#
			,#fcltsJobSe#
			,#qcItemDtls#
			,#qcItemUpperCd#
			,NVL(TO_NUMBER(REPLACE(#depthSort#,',','')),0)
			,#useYn#
			,#regUsr#
			,SYSDATE
			,#leafYn#
		)
	</insert>

	<update id="gamQcItemCdMngDao.updateQcItemCdMng_S">
		UPDATE QC_ITEM_CD_F SET
			 QC_ITEM_NM = #qcItemNm#
			,FCLTS_JOB_SE = #fcltsJobSe#
			,QC_ITEM_DTLS = #qcItemDtls#
			,QC_ITEM_UPPER_CD = #qcItemUpperCd#
			,DEPTH_SORT = NVL(TO_NUMBER(REPLACE(#depthSort#,',','')),0)
			,USE_YN = #useYn#
			,UPD_USR = #updUsr#
			,UPDT_DT = SYSDATE
			,LEAF_YN = #leafYn#
		WHERE QC_ITEM_CD = #qcItemCd#
	</update>

	<update id="gamQcItemCdMngDao.updateQcItemCdMngLeafYn_S" parameterClass="gamQcItemCdMngVo">
		UPDATE QC_ITEM_CD_F SET
			 LEAF_YN = (SELECT (CASE WHEN COUNT(*) > 0 THEN 'N' ELSE 'Y' END)
							FROM QC_ITEM_CD_F
						WHERE QC_ITEM_UPPER_CD = #qcItemUpperCd#)
		WHERE QC_ITEM_CD = #qcItemUpperCd#
	</update>

	<delete id="gamQcItemCdMngDao.deleteQcItemCdMng_S">
		DELETE FROM QC_ITEM_CD_F
		WHERE QC_ITEM_CD = #qcItemCd#
	</delete>

	<delete id="gamQcItemCdMngDao.deleteQcItemCdMngLowerData_S">
		<![CDATA[
		DELETE FROM QC_ITEM_CD_F
		WHERE DEPTH_SORT > NVL(TO_NUMBER(#depthSort#),10)
		]]>
		<isEqual property="depthSort" compareValue="1">
		AND QC_ITEM_UPPER_CD LIKE SUBSTRB(#qcItemCd#,1,1) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="2">
		AND QC_ITEM_UPPER_CD LIKE SUBSTRB(#qcItemCd#,1,3) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="3">
		AND QC_ITEM_UPPER_CD LIKE SUBSTRB(#qcItemCd#,1,5) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="4">
		AND QC_ITEM_UPPER_CD LIKE SUBSTRB(#qcItemCd#,1,7) || '%'
		</isEqual>

		<isEqual property="depthSort" compareValue="5">
		AND QC_ITEM_UPPER_CD = #qcItemCd#
		</isEqual>
	</delete>

</sqlMap>